const User = require('../models/User');
const Order = require('../models/Order');
const path = require('path');
const fs = require('fs');

// –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞
const uploadAvatar = async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({
        success: false,
        message: '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'
      });
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å (–±–µ–∑ –¥–æ–º–µ–Ω–∞), —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç localhost
    const avatarPath = `http://localhost:3000/uploads/${req.file.filename}`;

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∞–≤–∞—Ç–∞—Ä (–µ—Å–ª–∏ –Ω–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π)
    const user = await User.findById(req.user.id);
    if (user.avatar && user.avatar !== '/avatar.png') {
      const oldAvatarPath = path.join(__dirname, '..', user.avatar);
      if (fs.existsSync(oldAvatarPath)) {
        fs.unlinkSync(oldAvatarPath);
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –ø—É—Ç—å
    const updatedUser = await User.findByIdAndUpdate(
      req.user.id,
      { avatar: avatarPath },
      { new: true }
    );

    res.json({
      success: true,
      message: '–ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω',
      user: {
        id: updatedUser._id,
        firstName: updatedUser.firstName,
        lastName: updatedUser.lastName,
        email: updatedUser.email,
        phone: updatedUser.phone,
        role: updatedUser.role,
        avatar: updatedUser.avatar,
        createdAt: updatedUser.createdAt
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞'
    });
  }
};

// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
const getProfile = async (req, res) => {
  try {
    res.json({
      success: true,
      user: {
        id: req.user._id,
        firstName: req.user.firstName,
        lastName: req.user.lastName,
        email: req.user.email,
        phone: req.user.phone,
        role: req.user.role,
        avatar: req.user.avatar,
        createdAt: req.user.createdAt
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è'
    });
  }
};

// –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
const updateProfile = async (req, res) => {
  try {
    const { firstName, lastName, email, phone } = req.body;

    if (!firstName || !lastName || !email) {
      return res.status(400).json({
        success: false,
        message: '–ò–º—è, —Ñ–∞–º–∏–ª–∏—è –∏ email –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      });
    }

    if (email !== req.user.email) {
      const existingUser = await User.findOne({ email });
      if (existingUser) {
        return res.status(400).json({
          success: false,
          message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
        });
      }
    }

    const updatedUser = await User.findByIdAndUpdate(
      req.user._id,
      { firstName, lastName, email, phone },
      { new: true, runValidators: true }
    );

    res.json({
      success: true,
      message: '–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω',
      user: {
        id: updatedUser._id,
        firstName: updatedUser.firstName,
        lastName: updatedUser.lastName,
        email: updatedUser.email,
        phone: updatedUser.phone,
        role: updatedUser.role,
        avatar: updatedUser.avatar,
        createdAt: updatedUser.createdAt
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
    if (error.name === 'ValidationError') {
      const messages = Object.values(error.errors).map(err => err.message);
      return res.status(400).json({
        success: false,
        message: messages.join(', ')
      });
    }
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è'
    });
  }
};

// –ê–¥–º–∏–Ω: –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const getAllUsers = async (req, res) => {
  try {
    if (req.user.role !== 'admin') {
      return res.status(403).json({ success: false, message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω' });
    }
    const users = await User.find().select('-password').sort({ createdAt: -1 });
    res.json({ success: true, users });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' });
  }
};

// –ê–¥–º–∏–Ω: —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const createUser = async (req, res) => {
  try {
    if (req.user.role !== 'admin') {
      return res.status(403).json({ success: false, message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω' });
    }

    const { firstName, lastName, email, password, phone, role, specialization } = req.body;

    if (!firstName || !lastName || !email || !password || !role) {
      return res.status(400).json({ success: false, message: '–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã' });
    }

    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).json({ success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
    }

    const user = new User({
      firstName,
      lastName,
      email,
      password,
      phone: phone || '',
      role,
      specialization: role === 'master' ? specialization : ''
    });

    const savedUser = await user.save();

    res.status(201).json({
      success: true,
      message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
      user: {
        _id: savedUser._id,
        firstName: savedUser.firstName,
        lastName: savedUser.lastName,
        email: savedUser.email,
        phone: savedUser.phone,
        role: savedUser.role,
        specialization: savedUser.specialization,
        isActive: savedUser.isActive,
        avatar: savedUser.avatar,
        createdAt: savedUser.createdAt
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    if (error.name === 'ValidationError') {
      const messages = Object.values(error.errors).map(err => err.message);
      return res.status(400).json({ success: false, message: messages.join(', ') });
    }
    res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
  }
};

// –ê–¥–º–∏–Ω: –æ–±–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å
const updateUserRole = async (req, res) => {
  try {
    if (req.user.role !== 'admin') return res.status(403).json({ success: false, message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω' });
    if (req.params.id === req.user.id) return res.status(400).json({ success: false, message: '–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é —Ä–æ–ª—å' });

    const { role, specialization } = req.body;
    const updateData = { role, specialization: role === 'master' ? (specialization || '') : '' };

    const updatedUser = await User.findByIdAndUpdate(req.params.id, updateData, { new: true }).select('-password');
    if (!updatedUser) return res.status(404).json({ success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });

    res.json({ success: true, message: '–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞', user: updatedUser });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏:', error);
    res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏' });
  }
};

// –ê–¥–º–∏–Ω: –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å
const toggleUserStatus = async (req, res) => {
  try {
    if (req.user.role !== 'admin') return res.status(403).json({ success: false, message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω' });
    if (req.params.id === req.user.id) return res.status(400).json({ success: false, message: '–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å' });

    const user = await User.findById(req.params.id);
    if (!user) return res.status(404).json({ success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });

    user.isActive = !user.isActive;
    await user.save();

    res.json({
      success: true,
      message: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.isActive ? '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' : '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'}`,
      user: {
        _id: user._id,
        firstName: user.firstName,
        lastName: user.lastName,
        email: user.email,
        role: user.role,
        isActive: user.isActive
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
    res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞' });
  }
};

// –ê–¥–º–∏–Ω: —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å —É–¥–∞–ª–µ–Ω–∏–µ–º –∞–≤–∞—Ç–∞—Ä–∞)
const deleteUser = async (req, res) => {
  try {
    if (req.user.role !== 'admin') {
      return res.status(403).json({ success: false, message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω' });
    }
    if (req.params.id === req.user.id) {
      return res.status(400).json({ success: false, message: '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç' });
    }

    const user = await User.findById(req.params.id);
    if (!user) {
      return res.status(404).json({ success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞—è–≤–æ–∫
    const userOrders = await Order.find({ user: req.params.id });
    if (userOrders.length > 0) {
      return res.status(400).json({ success: false, message: '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞—è–≤–∫–∞–º–∏' });
    }

    // üî• –£–¥–∞–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä —Å –¥–∏—Å–∫–∞, –µ—Å–ª–∏ –æ–Ω –Ω–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
    if (user.avatar && user.avatar !== '/avatar.png') {
      // –ê–≤–∞—Ç–∞—Ä —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ URL –≤–∏–¥–∞: http://localhost:3000/uploads/123-123456789.jpg
      // –ù–∞–º –Ω—É–∂–Ω–æ –∏–∑–≤–ª–µ—á—å —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞
      const avatarFilename = user.avatar.split('/').pop(); // –ü–æ–ª—É—á–∞–µ–º "123-123456789.jpg"
      const avatarPath = path.join(__dirname, '..', 'uploads', avatarFilename);

      if (fs.existsSync(avatarPath)) {
        fs.unlinkSync(avatarPath);
        console.log(`üóëÔ∏è –ê–≤–∞—Ç–∞—Ä —É–¥–∞–ª—ë–Ω: ${avatarPath}`);
      }
    }

    // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    await User.findByIdAndDelete(req.params.id);

    res.json({ success: true, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
  }
};

module.exports = {
  uploadAvatar,
  getProfile,
  updateProfile,
  getAllUsers,
  createUser,
  updateUserRole,
  toggleUserStatus,
  deleteUser
};